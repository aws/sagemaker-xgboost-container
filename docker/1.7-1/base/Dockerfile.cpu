ARG UBUNTU_VERSION=20.04
ARG CUDA_VERSION=11.6.1
ARG IMAGE_DIGEST=c2d95c9c6ff77da41cf0f2f9e8c5088f5b4db20c16a7566b808762f05b9032ef

FROM nvidia/cuda:${CUDA_VERSION}-base-ubuntu${UBUNTU_VERSION}@sha256:${IMAGE_DIGEST}

# Argument Variables
ARG MINICONDA_VERSION=4.9.2
ARG CONDA_PY_VERSION=39
ARG CONDA_CHECKSUM="b4e46fcc8029e2cfa731b788f25b1d36"
ARG CONDA_PKG_VERSION=4.10.1
ARG PYTHON_VERSION=3.8.19
ARG PYARROW_VERSION=14.0.1
ARG MLIO_VERSION=0.9.0
ARG XGBOOST_VERSION=1.7.4

# Environment Variables
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONIOENCODING='utf-8'
ENV PATH=/miniconda3/bin:${PATH}

# Install system dependencies, clean up, and install Miniconda in a single RUN
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        ca-certificates \
        libatlas-base-dev \
        openjdk-8-jdk-headless \
        unzip \
        wget \
        ninja-build \
        cmake \
        zlib1g-dev \
        python3-dev \
        python3-distutils \
        python3-pip \
        libssl-dev \
        && rm -rf /var/lib/apt/lists/* && \
    cd /tmp && \
    curl -L --output Miniconda3.sh https://repo.anaconda.com/miniconda/Miniconda3-py${CONDA_PY_VERSION}_${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "${CONDA_CHECKSUM}  Miniconda3.sh" | md5sum -c - && \
    bash Miniconda3.sh -bfp /miniconda3 && \
    rm Miniconda3.sh && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Conda dependencies and Python packages
RUN conda config --system --set auto_update_conda false && \
    conda config --system --set show_channel_urls true && \
    echo "python ${PYTHON_VERSION}.*" >> /miniconda3/conda-meta/pinned && \
    conda install -c conda-forge python=${PYTHON_VERSION} requests==2.27.0 conda=${CONDA_PKG_VERSION} pyarrow=${PYARROW_VERSION} && \
    conda update -y conda && \
    pip install --upgrade pip && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Build MLIO and clean up build tools afterward
RUN cd /tmp && \
    git clone --branch v${MLIO_VERSION} https://github.com/awslabs/ml-io.git mlio && \
    cd mlio && \
    build-tools/build-dependency build/third-party all && \
    mkdir -p build/release && \
    cd build/release && \
    cmake -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_PREFIX_PATH="$(pwd)/../third-party" ../.. && \
    cmake --build . && \
    cmake --build . --target install && \
    cmake -DMLIO_INCLUDE_PYTHON_EXTENSION=ON -DPYTHON_EXECUTABLE="/miniconda3/bin/python3" \
        -DMLIO_INCLUDE_ARROW_INTEGRATION=ON ../.. && \
    cmake --build . --target mlio-py && \
    cmake --build . --target mlio-arrow && \
    cd ../../src/mlio-py && \
    python3 setup.py bdist_wheel && \
    python3 -m pip install dist/*.whl && \
    cp -r /tmp/mlio/build/third-party/lib/libtbb* /usr/local/lib/ && \
    ldconfig && \
    apt-get remove --purge -y cmake ninja-build build-essential && \
    apt-get autoremove -y && \
    rm -rf /tmp/mlio /tmp/mlio/build /var/lib/apt/lists/*

# Install XGBoost
RUN python3 -m pip install --no-cache -I xgboost==${XGBOOST_VERSION}
